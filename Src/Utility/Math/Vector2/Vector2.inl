#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>::Vector2() : x(0), y(0)
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>::Vector2(const T xValue, const T yValue) : x(xValue), y(yValue)
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>::Vector2(const Vector2& other) : x(other.x), y(other.y)
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>::Vector2(Vector2&& other) noexcept : x(std::move(other.x)), y(std::move(other.y))
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>::Vector2(const sf::Vector2<T>& other) : x(other.x), y(other.y)
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>::Vector2(sf::Vector2<T>&& other) : x(std::move(other.x)), y(std::move(other.y))
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>::Vector2(const AtomicVector2<T>& other) : x(other.x), y(other.y)
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>::Vector2(AtomicVector2<T>&& other) : x(std::move(other.x.load())), y(std::move(other.y.load()))
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
template <typename U>
Vector2<T>::Vector2(const Vector2<U>& other) : x(other.x), y(other.y)
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
template <typename U>
Vector2<T>::Vector2(Vector2<U>&& other) : x(std::move(other.x)), y(std::move(other.y))
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>& Vector2<T>::operator=(const Vector2& other)
{
    x = other.x;
    y = other.y;

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>& Vector2<T>::operator=(Vector2&& other) noexcept
{
    x = std::move(other.x);
    y = std::move(other.y);

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
template <typename U>
Vector2<T>& Vector2<T>::operator=(const Vector2<U>& other)
{
    x = other.x;
    y = other.y;

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
template <typename U>
Vector2<T>& Vector2<T>::operator=(Vector2<U>&& other)
{
    x = std::move(other.x);
    y = std::move(other.y);

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
bool Vector2<T>::operator==(const Vector2& right)
{
    return ((x == right.x) && (y == right.y));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
bool Vector2<T>::operator!=(const Vector2& right)
{
    return !(*this == right);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
T Vector2<T>::operator*(const Vector2& right) const
{
    return (x * right.x + y * right.y);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T> Vector2<T>::operator*(const T scalar) const
{
    return Vector2<T>(x * scalar, y * scalar);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T> Vector2<T>::operator/(const T scalar) const
{
    const T invertedScalar = (T)1.0 / scalar;

    return Vector2<T>(x * invertedScalar, y * invertedScalar);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T> Vector2<T>::operator+(const Vector2& right) const
{
    return Vector2<T>(x + right.x, y + right.y);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T> Vector2<T>::operator-(const Vector2& right) const
{
    return Vector2<T>(x - right.x, y - right.y);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>& Vector2<T>::operator+=(const Vector2& right)
{
    x = x + right.x;
    y = y + right.y;

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>& Vector2<T>::operator-=(const Vector2& right)
{
    x = x - right.x;
    y = y - right.y;

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>& Vector2<T>::operator/=(const Vector2& right)
{
    x = x / right.x;
    y = y / right.y;

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>& Vector2<T>::operator/=(const T scalar)
{
    const T invertedScalar = (T)1.0 / scalar;
    x = x * invertedScalar;
    y = y * invertedScalar;

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T>& Vector2<T>::operator*=(const T scalar)
{
    x = x * scalar;
    y = y *scalar;

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T> operator-(const Vector2<T>& right)
{
    return Vector2<T>(-right.x, -right.y);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
Vector2<T> operator*(const T scalar, const Vector2<T>& right)
{
    return Vector2<T>(right.x * scalar, right.y * scalar);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void Vector2<T>::Zero()
{
    x = y = 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
