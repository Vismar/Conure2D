#include "Time.hpp"
#include <chrono>

using namespace Utility;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time::Time(const Time& other) : _timeValue(other._timeValue.load())
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time::Time(Time&& other) noexcept  : _timeValue(other._timeValue.load())
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time& Time::operator=(const Time& other)
{
    _timeValue = other._timeValue.load();

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time& Time::operator=(Time&& other) noexcept
{
    _timeValue = other._timeValue.load();

    return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time::Time(const uint64_t hours, const uint64_t minutes, const uint64_t seconds, 
           const uint64_t milliseconds, const uint64_t microseconds, const uint64_t nanoseconds)
    : _timeValue(nanoseconds + microseconds * 1000ll + milliseconds * 1000000ll +
                 seconds * 1000000000ll + minutes * 60000000000ll + hours * 1440000000000ll)
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Time::CurrentTime()
{
    const auto currentTimeDuration = std::chrono::system_clock::now().time_since_epoch();
    const uint64_t nanoseconds = std::chrono::duration_cast<std::chrono::nanoseconds>(currentTimeDuration).count();

    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, nanoseconds);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double Time::ToHours() const
{
    return _timeValue / 1440000000000.0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double Time::ToMinutes() const
{
    return _timeValue / 60000000000.0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double Time::ToSeconds() const
{
    return _timeValue / 1000000000.0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint64_t Time::ToMilliseconds() const
{
    return _timeValue / 1000000ll;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint64_t Time::ToMicroseconds() const
{
    return _timeValue / 1000ll;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint64_t Time::ToNanoseconds() const
{
    return _timeValue;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Utility::operator==(const Time& left, const Time& right)
{
    return left.ToNanoseconds() == right.ToNanoseconds();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Utility::operator!=(const Time& left, const Time& right)
{
    return !(left == right);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Utility::operator<(const Time& left, const Time& right)
{
    return left.ToNanoseconds() < right.ToNanoseconds();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Utility::operator>(const Time& left, const Time& right)
{
    return !(left < right);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Utility::operator<=(const Time& left, const Time& right)
{
    return (left < right) || (left == right);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Utility::operator>=(const Time& left, const Time& right)
{
    return (left > right) || (left == right);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator-(const Time& left, const Time& right)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, left.ToNanoseconds() - right.ToNanoseconds());
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator+(const Time& left, const Time& right)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, left.ToNanoseconds() + right.ToNanoseconds());
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time& Utility::operator-=(Time& left, const Time& right)
{
    left = left - right;
    return left;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time& Utility::operator+=(Time& left, const Time& right)
{
    left = left + right;
    return left;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator*(const Time& left, const double right)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, static_cast<uint64_t>(left.ToNanoseconds() * right));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator*(const Time& left, const uint64_t right)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, left.ToNanoseconds() * right);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator*(const double left, const Time& right)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, static_cast<uint64_t>(left * right.ToNanoseconds()));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator*(const uint64_t left, const Time& right)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, left * right.ToNanoseconds());
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time& Utility::operator*=(Time& left, const double right)
{
    left = left * right;
    return left;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time& Utility::operator*=(Time& left, const uint64_t right)
{
    left = left * right;
    return left;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator/(const Time& left, const double right)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, static_cast<uint64_t>(left.ToNanoseconds() / right));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator/(const Time& left, const uint64_t right)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, left.ToNanoseconds() / right);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time& Utility::operator/=(Time& left, const double right)
{
    left = left / right;
    return left;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time& Utility::operator/=(Time& left, const uint64_t right)
{
    left = left / right;
    return left;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double Utility::operator/(const Time& left, const Time& right)
{
    return static_cast<double>(left.ToNanoseconds()) / right.ToNanoseconds();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator%(const Time& left, const Time& right)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, left.ToNanoseconds() % right.ToNanoseconds());
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time& Utility::operator%=(Time& left, const Time& right)
{
    left = left % right;
    return left;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator ""_h(const uint64_t hours)
{    
    return Time(hours);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator ""_min(const uint64_t minutes)
{
    // 0 hours
    return Time(0ll,  minutes);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator ""_s(const uint64_t seconds)
{
    // 0 hours, 0 minutes
    return Time(0ll, 0ll, seconds);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator ""_ms(const uint64_t milliseconds)
{
    // 0 hours, 0 minutes, 0 seconds
    return Time(0ll, 0ll, 0ll,milliseconds);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator ""_us(const uint64_t microseconds)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds
    return Time(0ll, 0ll, 0ll, 0ll, microseconds);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Time Utility::operator ""_ns(const uint64_t nanoseconds)
{
    // 0 hours, 0 minutes, 0 seconds, 0 milliseconds, 0 microseconds
    return Time(0ll, 0ll, 0ll, 0ll, 0ll, nanoseconds);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
