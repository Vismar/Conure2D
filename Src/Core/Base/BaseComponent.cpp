#include "BaseComponent.hpp"

using namespace Core;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BaseComponent::BaseComponent() : _turnedOn(true), _typeInfo(nullptr)
{ }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool BaseComponent::operator==(const BaseComponent& other) const
{
    return (*other._typeInfo == *_typeInfo);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool BaseComponent::operator==(const std::type_info& typeInfo) const
{
    return (typeInfo == *_typeInfo);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*shared_ptr<SceneObject> BaseComponent::GetSceneObject() const
{
    
}*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool BaseComponent::IsTurnedOn() const
{
    return _turnedOn;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BaseComponent::TurnOn(const bool turnOn)
{
    _turnedOn = turnOn;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BaseComponent::Initialize()
{
    if (_typeInfo == nullptr)
    {
        // There is no other way to store type of an object
        _typeInfo = const_cast<std::type_info*>(&typeid(*this));
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
